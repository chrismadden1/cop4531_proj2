06/05/2019 - copied over all of the necessary files into my project directory and finished looking over all the lecture notes
             for week 3-4 including Sorts and Asymptotics to help familiarize myself with merge sort better.
             
06/06/2019 - analyzed given code to try to better understand what is going on in sortspy.cpp and how we are supposed to make use of
              LessThanSpy<T> as I have not seen it in previous courses. 
              
06/07/2019 - I have now watched multiple videos and looked at existing algorithms on the internet for linked list bottom up merge sort 
              from website like geeksforgeeks and stackoverflow and looked at the different recursive and non recursive implementations 
              I now feel comfortable with starting the code.
              
06/09/2019 -  I now have a working(for the most part) version of void List<T>::Sort (P& comp) working and just need to clean up a few
              things mainly the things specified in the project details under "loose ends to tie up" which I should be able to finish soon
              
06/11/2019 -  Finished tying up all the loose ends and began testing and analyzing my algorithm for operational objectives 2&3.
              not completely sure about using 
template < typename T >
void List<T>::Sort ()
{
  fsu::LessThan<T> p;
  Sort(p);
}
but it seems to be working fine and shouldn't be necessary to rewrite what would be very similar code here in this function.

06/12/2019 -  I feel pretty comfortable with my code and makefile now so it is time to focus more on analysis which will be provided
              below.


Operational Objective 2:
  Memory allocation plays a huge role in why we choose mergesort for linked list over other types of sorts that are faster/more
  efficient with things like vectors or arrays. Linked list nodes are not necessarily adjacent in memory which means things like 
  inserting something in the middle takes O(1) space and time which is great.
  if our size is n, we would make log n amount of passes through the list and each time we combine 2 small lists into a larger 
  sorted list, and when a pass only merges once, you know the entire thing is now sorted. Note there are still n items.
  we get O(n log n) because we have n items iterated through log n times. This is pretty clearly demonstrated in my code.
  
 Operation Objective 3:
  Linked list data structures can be affected by OS memory paging because they are not contiguous and data can sometimes be found
  all over memory. Most memory paging algorithms thrive on things Locality and because of what I just stated, Linked list have
  the oppurtunity to have very poor locality of reference which makes it much harder and in turn slow for the memory paging 
  algorithms.
  
  
  
  ////////////////////////////////TESTING/////////////////////////////////////////////////////
  
   Input file name: out10.txt
            size: 10

=================================================================================
Comparison Sorts
=================================================================================
 algorithm              errors     comp_count                 usec            sec
 ---------------        ------     ----------                 ----            ---
 g_selection_sort            0             55                    2       0.000002
 g_insertion_sort            0             27                    1       0.000001
 g_quick_sort                0             23                    1       0.000001
 g_quick_sort_opt            0             23                    2       0.000002
 g_quick_sort_3w             0             40                    2       0.000002
 g_quick_sort_3w_opt         0             22                    1       0.000001
 g_merge_sort                0             24                    4       0.000004
 g_merge_sort_opt            0             26                    1       0.000001
 g_merge_sort_bu             0             25                    3       0.000003
 List::Sort                  0             25                    5       0.000005
 alt::g_heap_sort            0             40                    3       0.000003
 fsu::g_heap_sort            0             37                    2       0.000002
 cormen::g_heap_sort         0             37                    2       0.000002
=================================================================================
Numerical Sorts
=================================================================================
algorithm               errors     outer loop  size           usec            sec
---------               ------     ----------  ----           ----            ---
 counting_sort               0              -     -              2       0.000002
 bit_sort                    0           bits     8              4       0.000004
 bit_sort                    0           bits    16              9       0.000009
 bit_sort                    0           bits    32             14       0.000014
 bit_sort                    0           bits    64             33       0.000033
 byte_sort                   0          bytes     1              7       0.000007
 byte_sort                   0          bytes     2             11       0.000011
 byte_sort                   0          bytes     4             28       0.000028
 byte_sort                   0          bytes     8             60       0.000060
 word_sort                   0          words     1           2767       0.002767
 word_sort                   0          words     2           5145       0.005145
 word_sort                   0          words     4          10125       0.010125

 Total Time:                                                 19320       0.019320

 Process complete

 madden@linprog8.cs.fsu.edu:~/cop4531/proj2>sortspy.x out.txt log.txt

 Input file name: out.txt
            size: 100000

=================================================================================
Comparison Sorts
=================================================================================
 algorithm              errors     comp_count                 usec            sec
 ---------------        ------     ----------                 ----            ---
 g_selection_sort            0     5000050000             17591555      17.591555
 g_insertion_sort            0     2222256667             11422322      11.422322
 g_quick_sort                0      555941403              3969435       3.969435
 g_quick_sort_opt            0      555941313              3969957       3.969957
 g_quick_sort_3w             0         522129                 4013       0.004013
 g_quick_sort_3w_opt         0         522129                 3980       0.003980
 g_merge_sort                0        1473069                20404       0.020404
 g_merge_sort_opt            0        1502791                15010       0.015010
 g_merge_sort_bu             0        1507090                19130       0.019130
 List::Sort                  0        1507090                26279       0.026279
 alt::g_heap_sort            0        2747902                27554       0.027554
 fsu::g_heap_sort            0        2731526                26465       0.026465
 cormen::g_heap_sort         0        2731526                26679       0.026679
=================================================================================
Numerical Sorts
=================================================================================
algorithm               errors     outer loop  size           usec            sec
---------               ------     ----------  ----           ----            ---
 counting_sort               0              -     -           1391       0.001391
 bit_sort                    0           bits     8           9572       0.009572
 bit_sort                    0           bits    16          23336       0.023336
 bit_sort                    0           bits    32          39501       0.039501
 bit_sort                    0           bits    64          81829       0.081829
 byte_sort                   0          bytes     1           1476       0.001476
 byte_sort                   0          bytes     2           2798       0.002798
 byte_sort                   0          bytes     4           5218       0.005218
 byte_sort                   0          bytes     8          10239       0.010239
 word_sort                   0          words     1           2807       0.002807
 word_sort                   0          words     2           6105       0.006105
 word_sort                   0          words     4           9969       0.009969

 Total Time:                                              80990473      80.990473

 Process complete

  REFERENCES: GeeksForGeeks.com, https://en.wikipedia.org/wiki/Linked_data_structure#General_disadvantages,
  https://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
